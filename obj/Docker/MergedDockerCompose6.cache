name: dockercompose7210502056790664917
services:
  adminer:
    container_name: adminer
    image: adminer
    networks:
      backend: null
    ports:
      - mode: ingress
        target: 8080
        published: "8082"
        protocol: tcp
    restart: always
  lostandfound:
    container_name: lostandfound
    environment:
      POSTGRES_DB: lostandfound-db
      POSTGRES_PASSWORD: lostandfound-password
      POSTGRES_USER: lostandfound-user
    image: postgres:15-alpine
    networks:
      backend: null
    ports:
      - mode: ingress
        target: 5432
        published: "5435"
        protocol: tcp
    restart: always
    volumes:
      - type: volume
        source: data-postgres
        target: /var/lib/postgresql/data
        volume: {}
  lostandfoundapi:
    build:
      context: C:\Users\SNDIENGK\Documents\challenge\Lost-and-found
      dockerfile: LostAndFoundApi/Dockerfile
      args:
        BUILD_CONFIGURATION: Release
      labels:
        com.microsoft.created-by: visual-studio
        com.microsoft.visual-studio.project-name: LostAndFoundApi
    container_name: LostAndFoundApi
    entrypoint:
      - tail
      - -f
      - /dev/null
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_HTTP_PORTS: "8080"
      ASPNETCORE_HTTPS_PORTS: "8081"
    image: lostandfoundapi
    labels:
      com.microsoft.visual-studio.project-name: LostAndFoundApi
      com.microsoft.visualstudio.debuggee.arguments: ' --additionalProbingPath /.nuget/packages  "/app/LostAndFoundApi.dll"'
      com.microsoft.visualstudio.debuggee.killprogram: /bin/sh -c "if PID=$$(pidof dotnet); then kill $$PID; fi"
      com.microsoft.visualstudio.debuggee.program: dotnet
      com.microsoft.visualstudio.debuggee.workingdirectory: /app
    networks:
      backend: null
    ports:
      - mode: ingress
        target: 8080
        published: "8064"
        protocol: tcp
      - mode: ingress
        target: 8081
        published: "8065"
        protocol: tcp
    tty: true
    volumes:
      - type: bind
        source: C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\HotReload
        target: /HotReloadAgent
        read_only: true
        bind:
          create_host_path: true
      - type: bind
        source: C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Sdks\Microsoft.Docker.Sdk\tools\HotReloadProxy\linux-x64\net6.0
        target: /HotReloadProxy
        read_only: true
        bind:
          create_host_path: true
      - type: bind
        source: C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Sdks\Microsoft.Docker.Sdk\tools\TokenService.Proxy\linux-x64\net6.0
        target: /TokenService.Proxy
        read_only: true
        bind:
          create_host_path: true
      - type: bind
        source: C:\Users\SNDIENGK\AppData\Roaming/ASP.NET/Https
        target: /home/app/.aspnet/https
        read_only: true
        bind:
          create_host_path: true
      - type: bind
        source: C:\Users\SNDIENGK\AppData\Roaming/Microsoft/UserSecrets
        target: /home/app/.microsoft/usersecrets
        read_only: true
        bind:
          create_host_path: true
      - type: bind
        source: C:\Users\SNDIENGK\vsdbg\vs2017u5
        target: /remote_debugger
        bind:
          create_host_path: true
      - type: bind
        source: C:\Users\SNDIENGK\AppData\Roaming/ASP.NET/Https
        target: /root/.aspnet/https
        read_only: true
        bind:
          create_host_path: true
      - type: bind
        source: C:\Users\SNDIENGK\AppData\Roaming/Microsoft/UserSecrets
        target: /root/.microsoft/usersecrets
        read_only: true
        bind:
          create_host_path: true
networks:
  backend:
    name: lostandfound-network
volumes:
  data-postgres:
    name: dockercompose7210502056790664917_data-postgres